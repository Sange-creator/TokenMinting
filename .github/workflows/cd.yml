name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/tokenminting.pem
        chmod 600 ~/.ssh/tokenminting.pem
        ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Images
      run: |
        cd TokenMinting/backend
        sudo docker-compose build
        sudo docker tag tokenminting_backend_1 ${{ secrets.DOCKER_USERNAME }}/tokenminting-backend:latest
        sudo docker tag tokenminting_frontend_1 ${{ secrets.DOCKER_USERNAME }}/tokenminting-frontend:latest
        sudo docker push ${{ secrets.DOCKER_USERNAME }}/tokenminting-backend:latest
        sudo docker push ${{ secrets.DOCKER_USERNAME }}/tokenminting-frontend:latest

    - name: Deploy to EC2
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        SOLANA_NETWORK: devnet
        SOLANA_RPC_URL: https://api.devnet.solana.com
        SECRET_KEY: ${{ secrets.PRIVATE_KEY }}
      run: |
        ssh -i ~/.ssh/tokenminting.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
          # Install Docker if not present
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Install Docker Compose if not present
          if ! [ -x "$(command -v docker-compose)" ]; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Create app directory
          mkdir -p ~/tokenminting
          cd ~/tokenminting

          # Create docker-compose.yml
          cat > docker-compose.yml << 'INNER_EOF'
          version: '3.8'
          services:
            frontend:
              image: ${{ secrets.DOCKER_USERNAME }}/tokenminting-frontend:latest
              ports:
                - "3001:3001"
              environment:
                - REACT_APP_API_URL=http://localhost:3000
                - NODE_ENV=development
                - WDS_SOCKET_PORT=0
                - PORT=3001
                - DANGEROUSLY_DISABLE_HOST_CHECK=true
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001"]
                interval: 30s
                timeout: 10s
                retries: 3
            
            backend:
              image: ${{ secrets.DOCKER_USERNAME }}/tokenminting-backend:latest
              ports:
                - "3000:3000"
              environment:
                - MONGODB_URI=${MONGODB_URI}
                - SOLANA_NETWORK=${SOLANA_NETWORK}
                - SOLANA_RPC_URL=${SOLANA_RPC_URL}
                - SECRET_KEY=${SECRET_KEY}
                - NODE_ENV=development
                - PORT=3000
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
          INNER_EOF

          # Create .env file
          cat > .env << 'ENV_EOF'
          MONGODB_URI=${MONGODB_URI}
          SOLANA_NETWORK=${SOLANA_NETWORK}
          SOLANA_RPC_URL=${SOLANA_RPC_URL}
          SECRET_KEY=${SECRET_KEY}
          ENV_EOF

          # Login to Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Stop and remove existing containers
          sudo docker-compose down --remove-orphans || true
          
          # Clean up old images
          sudo docker system prune -af --volumes || true

          # Pull and deploy
          sudo docker-compose pull
          sudo docker-compose up -d

          # Verify deployment
          sudo docker ps
          echo "Checking services health..."
          sleep 30  # Wait for services to start

          # Check if services are running
          if sudo docker ps | grep -q "tokenminting-frontend"; then
            echo "Frontend is running"
          else
            echo "Frontend failed to start"
            exit 1
          fi

          if sudo docker ps | grep -q "tokenminting-backend"; then
            echo "Backend is running"
          else
            echo "Backend failed to start"
            exit 1
          fi

          # Check if services are responding
          if curl -s http://localhost:3001 > /dev/null; then
            echo "Frontend is responding"
          else
            echo "Frontend is not responding"
            exit 1
          fi

          if curl -s http://localhost:3000 > /dev/null; then
            echo "Backend is responding"
          else
            echo "Backend is not responding"
            exit 1
          fi

          echo "All services are up and running!"
          echo "Frontend URL: http://$(curl -s ifconfig.me):3001"
          echo "Backend URL: http://$(curl -s ifconfig.me):3000"
          echo "Deployment completed successfully!"
        EOF 